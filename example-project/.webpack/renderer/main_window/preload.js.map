{"version":3,"file":"preload.js","mappings":"m/CAAA,aAEAA,SAASC,iBAAiB,oBAAoB,WAC7BD,SAASE,eAAe,cAChCC,QAAU,WACf,EAAAC,YAAYC,KAAK,aACnB,EACA,IAAMC,EAAMC,QAAQC,KAAKC,MAAK,SAACH,GAAQ,OAAAA,EAAII,WAAW,cAAf,IACvC,GAAIJ,EAAK,CACP,IAAMK,EAAKL,EAAIM,MAAM,KAAK,GAC1BZ,SAASa,MAAQ,iBAAUF,E,CAE/B,IAkBA,EAAAP,YAAYU,YAAY,wBAAwB,WAC9C,MAhBO,kBAiBT,IAEA,EAAAV,YAAYU,YAAY,yBAAyB,qD,kDACxC,SAhBA,IAAIC,SAAQ,SAACC,GAClBC,YAAW,WACTD,EAAQ,oBACV,GAAG,IACL,K,OAYA,MAAO,CAAP,EAAO,U,UAGT,EAAAZ,YAAYc,GAAG,eAAe,SAACC,EAAOC,EAAST,GAC7C,IAAMU,EAAUrB,SAASsB,cAAc,OACvCD,EAAQE,UAAYH,EACpBC,EAAQV,GAAKA,EACbX,SAASwB,KAAKC,YAAYJ,EAC5B,G,UC3CAK,EAAOC,QAAUC,QAAQ,W,GCCrBC,EAA2B,CAAC,GAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUI,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASG,GAGpEJ,EAAOC,OACf,CCnB0BG,CAAoB,I","sources":["webpack://electron-playwright-helpers-example/./src/renderer/preload.ts","webpack://electron-playwright-helpers-example/external node-commonjs \"electron\"","webpack://electron-playwright-helpers-example/webpack/bootstrap","webpack://electron-playwright-helpers-example/webpack/startup"],"sourcesContent":["import { ipcRenderer } from 'electron'\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const button = document.getElementById('new-window')\n  button.onclick = () => {\n    ipcRenderer.send('new-window')\n  }\n  const arg = process.argv.find((arg) => arg.startsWith('--window-id'))\n  if (arg) {\n    const id = arg.split('=')[1]\n    document.title = `Window ${id}`\n  }\n})\n\nfunction getSynchronousData(): string {\n  return 'Synchronous Data'\n}\n\nfunction getAsynchronousData(): Promise<string> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('Asynchronous Data')\n    }, 1000)\n  })\n}\n\n/**\n * ipcRenderer listeners do not usually return a value\n * but the e2e test will call this function to get the data\n */\nipcRenderer.addListener('get-synchronous-data', () => {\n  return getSynchronousData()\n})\n\nipcRenderer.addListener('get-asynchronous-data', async () => {\n  return await getAsynchronousData()\n})\n\nipcRenderer.on('add-message', (event, content, id) => {\n  const message = document.createElement('div')\n  message.innerText = content\n  message.id = id\n  document.body.appendChild(message)\n})\n","module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(738);\n"],"names":["document","addEventListener","getElementById","onclick","ipcRenderer","send","arg","process","argv","find","startsWith","id","split","title","addListener","Promise","resolve","setTimeout","on","event","content","message","createElement","innerText","body","appendChild","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}